openapi: 3.0.1
info:
  title: Sample mySQL Spring Boot Project for onboarding
  description: This is my first Spring Bott and openapi project. It lets you lsit a set of users, enter name and email of a user and find a user by an id.
  version: '0.1'
  
servers:
  - url: 'http://localhost:8080'
    description: my local server for spring boot tests
    
components:
  schemas:
    # input user object - currently not used
    UserInput:
      type: object
      properties:
        name:
          type: string
          example: 'Jessica Smith'
        email:
          type: string
          example: 'Jessica.Smith@gmail.com'
    # returned user object with id
    UserFull:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 4
        name:
          type: string
          example: 'Jessica Smith'
        email:
          type: string
          example: 'Jessica.Smith@gmail.com'
    # status response from getUSer in case of errors
    StatusResponseBody:
      type: object
      properties:
        timestamp:
          type: string
          example: '2021-09-21T20:57:15.841+00:00'
        status:
          type: integer
          format: int64
          example: 400
        error:
          type: string
          example: 'Bad Request'
        path:
          type: string
          example: '/demo/getUser'


  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
      
security:
  - BasicAuth: []  

paths:
  /demo:
    get:
      summary: base path. just returns 200
      description: just the base path without any logic
      responses:
        '200':
          description: 'returns empty page'
          content:
            # application/json:
            #   schema:
            #     ...
            text/plain:
              schema:
                type: string
                example: ''
  /demo/hello:
    get:
      summary: base path. just returns 200
      description: just the base path without any logic
      responses:
        '200':
          description: 'returns "Hello"'
          content:
             # application/json:
             #   schema:
             #     ...
             text/plain:
               schema:
                 type: string
                 example: 'Hello'

  /demo/all:
    get:
      summary: 'Return all existing users as array or null if none available.'
      responses:
        '200':
          description: 'The array of users or null'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserFull'
        '401':
          description: Authorization information is missing or invalid.

  /demo/getUser:
    get:
      summary: 'Returns a user by ID.'
      parameters:
        - name: 'id'
          in: query
          required: true
          description: The ID of the user to return.
          schema:
            type : integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: Return a user object or null.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserFull'
        '400':
          description: The specified user ID is invalid (not a number or empty).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponseBody'
        '401':
          description: Authorization information is missing or invalid.
        default:
          description: Unexpected error


  /demo/add:
    post:
      summary: 'create a new user'
      description: 'create a new user with name and email'
      parameters:
        - name: 'name'
          in: query
          description: 'The user name'
          required: true
          schema:
            type: 'string'
        - name: 'email'
          in: query
          description: 'The email of the user'
          required: true
          schema:
            type: 'string'
      responses:
        '200':
          description: "successful operation"
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: Authorization information is missing or invalid.
        default:
          description: Unexpected error